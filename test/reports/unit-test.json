{
  "stats": {
    "suites": 2,
    "tests": 7,
    "passes": 7,
    "pending": 0,
    "failures": 0,
    "start": "2019-05-06T23:42:35.368Z",
    "end": "2019-05-06T23:42:35.391Z",
    "duration": 23,
    "testsRegistered": 7,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "86fba352-8017-432a-acbc-0859210c6347",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "290b6391-db9b-420c-8b67-dfaf11ec606d",
        "title": "Testing Calculator",
        "fullFile": "C:\\myData\\microservices\\RnD\\mocha-project\\test\\test.js",
        "file": "\\test\\test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should calculate the sum of two numbers",
            "fullTitle": "Testing Calculator should calculate the sum of two numbers",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "//assert.equal(calc.calculate('a', 9, 3),12,'passed');\nvar result = calc.calculate('a', 9, 3);\nresult.should.be.equal(12);",
            "err": {},
            "isRoot": false,
            "uuid": "bbd0eafb-560a-4e66-b5f9-7ff1b71abab2",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should calculate the difference of two numbers",
            "fullTitle": "Testing Calculator should calculate the difference of two numbers",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "//assert.equal(calc.calculate('s', 9, 3),6,'passed');\nvar result = calc.calculate('s', 9, 3);\nresult.should.be.equal(6);",
            "err": {},
            "isRoot": false,
            "uuid": "eb15965a-c0e4-433c-9ac2-faf64b588a96",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should calculate the product of two numbers",
            "fullTitle": "Testing Calculator should calculate the product of two numbers",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "//assert.equal(calc.calculate('m', 9, 3),27,'passed');\nvar result = calc.calculate('m', 9, 3);\nresult.should.be.equal(27);",
            "err": {},
            "isRoot": false,
            "uuid": "e910ba82-c19d-4c55-9163-6eb8d619f914",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should calculate the dividend of two numbers",
            "fullTitle": "Testing Calculator should calculate the dividend of two numbers",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "//assert.equal(calc.calculate('d', 9, 3),3,'passed');\nvar result = calc.calculate('d', 9, 3);\nresult.should.be.equal(3);",
            "err": {},
            "isRoot": false,
            "uuid": "890bb9b2-527c-4f48-b2e1-d08b2e8415eb",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "bbd0eafb-560a-4e66-b5f9-7ff1b71abab2",
          "eb15965a-c0e4-433c-9ac2-faf64b588a96",
          "e910ba82-c19d-4c55-9163-6eb8d619f914",
          "890bb9b2-527c-4f48-b2e1-d08b2e8415eb"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 5,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "0cd02524-6b3b-426a-8f4c-425a6ba8fb1d",
        "title": "Testing Calculator-Exceptions",
        "fullFile": "C:\\myData\\microservices\\RnD\\mocha-project\\test\\test.js",
        "file": "\\test\\test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return error for blank operation",
            "fullTitle": "Testing Calculator-Exceptions should return error for blank operation",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.throws(()=>{calc.calculate('',3,3);}, /Error: Operation can not be blank. Operation - \\[a\\]ddition, \\[s\\]ubtraction, \\[m\\]ultiply, \\[d\\]ivide/,'failed');",
            "err": {},
            "isRoot": false,
            "uuid": "2adc3f73-467d-4161-b734-48da8f533f09",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return error for invalid operation",
            "fullTitle": "Testing Calculator-Exceptions should return error for invalid operation",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.throws(()=>{calc.calculate('e',3,3);},/Error: Invalid operation. Operation - \\[a\\]ddition, \\[s\\]ubtraction, \\[m\\]ultiply, \\[d\\]ivide/,'failed');",
            "err": {},
            "isRoot": false,
            "uuid": "3bec9e72-704b-496f-9a11-8d8b78dbb959",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return error for incorrect operands",
            "fullTitle": "Testing Calculator-Exceptions should return error for incorrect operands",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.throws(()=>{calc.calculate('a','s',3);},/Error: one or more operands found to be non-integer/,'failed');",
            "err": {},
            "isRoot": false,
            "uuid": "004251a3-26be-4cfd-9d9f-f5930b6e18b2",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "2adc3f73-467d-4161-b734-48da8f533f09",
          "3bec9e72-704b-496f-9a11-8d8b78dbb959",
          "004251a3-26be-4cfd-9d9f-f5930b6e18b2"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2019
}